//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
using Couchbase.Lite;

namespace AssemblyCSharp
{
	public class UserAccountFacebookDataHandler: IUserAccountDataHandler
	{
		private SocialMediaHandler socialMediaAccount;
		private GameObject couchDatabaseObject;
		private CouchbaseDatabase couchDatabase;
		private Replication pullReplication;
		private FBUserAccount fbUserAccount = new FBUserAccount();
		private GameObject dataUpdaterObject;
		private DataUpdater dataUpdater;
		private UserDefineKeys userDefineKeys;
		private const int maxLevel = 20;

		public UserAccountFacebookDataHandler ()
		{
			SetupDataUpdater ();
		}

		public void SocialMediaObject(GameObject socialMediaObject){
			if (socialMediaObject != null) {
				socialMediaAccount = (SocialMediaHandler) socialMediaObject.GetComponent(typeof(SocialMediaHandler));
			}
		}
		
		public void SetDatabaseObject(GameObject databaseObject){
			couchDatabaseObject = databaseObject;
			couchDatabase = (CouchbaseDatabase)couchDatabaseObject.GetComponent (typeof(CouchbaseDatabase));
			fbUserAccount.SetDatabase(couchDatabase);
		}

		public void ChangeData(){
			if (dataUpdater != null) {
				dataUpdater.StartPullData();
			}
			Dictionary<int, int> mountainAdvScores = GetHighestScorePerLevel (GameScoreDefineKeys.MountainAdventure);
			Dictionary<int, int> cityAdvScores = GetHighestScorePerLevel (GameScoreDefineKeys.CityAdventure);
			Dictionary<int, int> beachAdvScores = GetHighestScorePerLevel (GameScoreDefineKeys.BeachAdventure);

			SaveHighestScorePerLevel (mountainAdvScores, GameScoreDefineKeys.MountainAdventure);
			SaveHighestScorePerLevel (cityAdvScores, GameScoreDefineKeys.CityAdventure);
			SaveHighestScorePerLevel (beachAdvScores, GameScoreDefineKeys.BeachAdventure);

			SaveTotalScoreFromPerLevel (mountainAdvScores, GameScoreDefineKeys.MountainAdventure);
			SaveTotalScoreFromPerLevel (cityAdvScores, GameScoreDefineKeys.CityAdventure);
			SaveTotalScoreFromPerLevel (beachAdvScores, GameScoreDefineKeys.BeachAdventure);

			if (CheckIfOnlineAccountExist ()) {
				DeleteTemporaryAccount();
			} else {
				UpdateTemporaryAccount ();
			}

			if (dataUpdater != null) {
				dataUpdater.StartPushData();
			}
		}

		void SetupDataUpdater(){
			dataUpdaterObject = GameObject.Find ("DataUpdater");
			if (dataUpdaterObject != null) {
				dataUpdater = (DataUpdater)dataUpdaterObject.GetComponent (typeof(DataUpdater));
			}
		}

		Dictionary<int, int> GetHighestScorePerLevel(string GameAdventureName){

			string tempAccountGUUID = GetUUIDofAccount (UserAccountDefineKeys.TemporaryEmail, UserAccountDefineKeys.TemporaryID);
			string socialMedAccountGUUID = GetUUIDofAccount (socialMediaAccount.GetAccountEmail(), socialMediaAccount.GetAccountID ());

			Dictionary<int, int> tempAccountScores = GetScores (GameAdventureName + tempAccountGUUID);
			Dictionary<int, int> socialMedAccountScores = GetScores (GameAdventureName + socialMedAccountGUUID);
			Dictionary<int, int> highestScorePerLevel = new Dictionary<int, int> ();

			for (int level = 1; level <= maxLevel; level++) {
				int highestScore = (tempAccountScores[level] > socialMedAccountScores[level])? tempAccountScores[level]:socialMedAccountScores[level];
				highestScorePerLevel.Add(level, highestScore);
			}

			return highestScorePerLevel;
		}

		void SaveHighestScorePerLevel(Dictionary<int, int> highestScorePerLevel, string GameAdventureName){

			bool docIsNotNull = SetDocumentForGameAdventureDatabase (GameAdventureName);

			if (docIsNotNull) {
				for (int level = 1; level <= maxLevel; level++) {
					couchDatabase.SaveData (GetFieldForLevelScore (level), highestScorePerLevel [level]);
				}
			}
		}

		void SaveTotalScoreFromPerLevel(Dictionary<int, int> highestScorePerLevel, string GameAdventureName){
			int total = 0;
			for (int level = 1; level <= maxLevel; level++) {
				total += highestScorePerLevel[level];
			}

			bool docIsNotNull = SetDocumentForGameAdventureDatabase (GameAdventureName);
			if (docIsNotNull) {
				couchDatabase.SaveData (GameScoreDefineKeys.Total, total);
			}

		}

		bool SetDocumentForGameAdventureDatabase(string GameAdventureName){
			bool documentIsNotNull = false;
			couchDatabase.SelectDocumentWithID(GameAdventureName + GetUUIDofAccount (socialMediaAccount.GetAccountEmail(), socialMediaAccount.GetAccountID ()));

			documentIsNotNull = !couchDatabase.IsDocumentNull ();


			if (!documentIsNotNull) {
				couchDatabase.SelectDocumentWithID(GameAdventureName + GetUUIDofAccount (UserAccountDefineKeys.TemporaryEmail, UserAccountDefineKeys.TemporaryID));
				documentIsNotNull = !couchDatabase.IsDocumentNull();
			}

			return documentIsNotNull;

		}

		string GetFieldForLevelScore(int level){
			return GameScoreDefineKeys.Level + level.ToString () + GameScoreDefineKeys.ScoreName;
		}

		Dictionary<int, int> GetScores(string documentID){
			Dictionary<int, int> gameScoreDictionary = new Dictionary<int, int> ();
			couchDatabase.SelectDocumentWithID (documentID);

			if (!couchDatabase.IsDatabaseNull ()) {
				for(int level = 1; level <= maxLevel; level++){
							string scoreInString = couchDatabase.ReadDataAsString(GetFieldForLevelScore(level));
					gameScoreDictionary.Add(level, ConvertScoreToInt(scoreInString));
				}
			}

			return gameScoreDictionary;
		}

		int ConvertScoreToInt(string score){
			int gameScore = 0;
			if (!String.IsNullOrEmpty (score)) {
				gameScore = int.Parse(score);
			}
			return gameScore;
		}

		string GetUUIDofAccount(string email, string id){
			fbUserAccount.UserID = id;
			fbUserAccount.UserEmail = email;
			return fbUserAccount.GetUUID ();
		}

		bool CheckIfOnlineAccountExist(){
			couchDatabase.SelectDocumentWithID(UserAccountDefineKeys.FBEmail + "::" + socialMediaAccount.GetAccountEmail ());
			return couchDatabase.IsDocumentNull ();
		}

		void UpdateTemporaryAccount(){
			Debug.Log ("At UserAccountFacebookDataHandler: RenameTemporaryAccount()");
			if (socialMediaAccount != null &&  couchDatabase != null) {
				string UUID = GetUUIDofAccount(UserAccountDefineKeys.TemporaryEmail, UserAccountDefineKeys.TemporaryID);
				Debug.Log ("At UserAccountFacebookDataHandler::ChangeData(): UUID: " + UUID);
				
				if(!string.IsNullOrEmpty(UUID)){
					fbUserAccount.UserID = socialMediaAccount.GetAccountID();
					fbUserAccount.UserEmail = socialMediaAccount.GetAccountEmail();
					Debug.Log("At UserAccountFacebookDataHandler::ChangeData(): UserID: " + fbUserAccount.UserID);
					Debug.Log("At UserAccountFacebookDataHandler::ChangeData(): UserEmail: " + fbUserAccount.UserEmail);
					fbUserAccount.Update(UUID);

				}else{
					Debug.Log("At UserAccountFacebookDataHandler::ChangeData(): UUID is null");
				}
			}
		}

		void DeleteTemporaryAccount(){
			string temporaryGUID = GetUUIDofAccount (UserAccountDefineKeys.TemporaryEmail, UserAccountDefineKeys.TemporaryID);
			couchDatabase.DeleteDocumentWithID (temporaryGUID);
			couchDatabase.DeleteDocumentWithID (UserAccountDefineKeys.FBEmail + "::" + UserAccountDefineKeys.TemporaryEmail);
			couchDatabase.DeleteDocumentWithID (UserAccountDefineKeys.FBID + "::" + UserAccountDefineKeys.TemporaryID);
			couchDatabase.DeleteDocumentWithID (GameScoreDefineKeys.MountainAdventure + temporaryGUID);
			couchDatabase.DeleteDocumentWithID (GameScoreDefineKeys.CityAdventure + temporaryGUID);
			couchDatabase.DeleteDocumentWithID (GameScoreDefineKeys.BeachAdventure + temporaryGUID);
			couchDatabase.DeleteDocumentWithID (GameScoreDefineKeys.EndlessAdventure + temporaryGUID);
		}
	}
}

